name: Chatbot CI

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main, development ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sundays at midnight

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Install ESLint
        run: npm install eslint eslint-plugin-node --save-dev
      - name: Run linting
        run: npx eslint .

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test
        env:
          TEST_MONGODB_URI: mongodb://localhost:27017/chatbot-test
          JWT_SECRET: test-jwt-secret
          NODE_ENV: test
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: coverage/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run npm audit
        run: npm audit
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'chatbot-app'
          path: '.'
          format: 'HTML'
          args: >
            --failOnCVSS 7
            --enableRetired
      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: reports/

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [lint, test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development')
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Create .env file
        run: |
          echo "NODE_ENV=production" > .env
          echo "PORT=3000" >> .env
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
      - name: Build widget assets
        run: |
          mkdir -p dist
          cp -r public dist/
      - name: Package application
        run: |
          tar --warning=no-file-changed -czf chatbot-app.tar.gz --exclude="node_modules" --exclude=".git" --exclude="logs" --exclude="backups" --exclude="widget-versions" --exclude="uploads" --exclude="load-test-results" --exclude="security-reports" .
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: chatbot-app
          path: chatbot-app.tar.gz

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/development'
    environment: staging
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: chatbot-app
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Deploy to staging server
        run: |
          scp -o StrictHostKeyChecking=no chatbot-app.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'ENDSSH'
            mkdir -p ~/chatbot-app
            tar -xzf chatbot-app.tar.gz -C ~/chatbot-app
            cd ~/chatbot-app
            npm ci --production
            pm2 restart chatbot-app || pm2 start server.js --name chatbot-app
          ENDSSH

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: chatbot-app
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Deploy to production server
        run: |
          scp -o StrictHostKeyChecking=no chatbot-app.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'ENDSSH'
            mkdir -p ~/chatbot-app
            tar -xzf chatbot-app.tar.gz -C ~/chatbot-app
            cd ~/chatbot-app
            npm ci --production
            pm2 restart chatbot-app || pm2 start server.js --name chatbot-app
          ENDSSH
